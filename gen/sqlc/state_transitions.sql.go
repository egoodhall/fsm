// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: state_transitions.sql

package sqlc

import (
	"context"
)

const getHistory = `-- name: GetHistory :many
SELECT id, attempt, task_id, from_state, to_state, data, created_at FROM state_transitions
WHERE task_id = ?
ORDER BY created_at ASC
`

func (q *Queries) GetHistory(ctx context.Context, taskID int64) ([]StateTransition, error) {
	rows, err := q.db.QueryContext(ctx, getHistory, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StateTransition
	for rows.Next() {
		var i StateTransition
		if err := rows.Scan(
			&i.ID,
			&i.Attempt,
			&i.TaskID,
			&i.FromState,
			&i.ToState,
			&i.Data,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastValidTransition = `-- name: GetLastValidTransition :one
SELECT id, attempt, task_id, from_state, to_state, data, created_at FROM state_transitions
WHERE task_id = ?
  AND to_state != '__error__'
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLastValidTransition(ctx context.Context, taskID int64) (StateTransition, error) {
	row := q.db.QueryRowContext(ctx, getLastValidTransition, taskID)
	var i StateTransition
	err := row.Scan(
		&i.ID,
		&i.Attempt,
		&i.TaskID,
		&i.FromState,
		&i.ToState,
		&i.Data,
		&i.CreatedAt,
	)
	return i, err
}

const getTaskState = `-- name: GetTaskState :one
SELECT to_state FROM state_transitions
WHERE task_id = ?
  AND to_state != '__error__'
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetTaskState(ctx context.Context, taskID int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getTaskState, taskID)
	var to_state string
	err := row.Scan(&to_state)
	return to_state, err
}

const recordTransition = `-- name: RecordTransition :exec
INSERT INTO state_transitions (task_id, attempt, from_state, to_state, data)
VALUES (?, ?, ?, ?, ?)
`

type RecordTransitionParams struct {
	TaskID    int64
	Attempt   int64
	FromState string
	ToState   string
	Data      []byte
}

func (q *Queries) RecordTransition(ctx context.Context, arg RecordTransitionParams) error {
	_, err := q.db.ExecContext(ctx, recordTransition,
		arg.TaskID,
		arg.Attempt,
		arg.FromState,
		arg.ToState,
		arg.Data,
	)
	return err
}
