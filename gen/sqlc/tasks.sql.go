// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tasks.sql

package sqlc

import (
	"context"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (fsm_id, event)
VALUES (?, ?)
RETURNING id, event, fsm_id, created_at
`

func (q *Queries) CreateTask(ctx context.Context, fsmID int64, event []byte) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask, fsmID, event)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Event,
		&i.FsmID,
		&i.CreatedAt,
	)
	return i, err
}

const createTaskWithID = `-- name: CreateTaskWithID :one
INSERT INTO tasks (fsm_id, id, event)
VALUES (?, ?, ?)
RETURNING id, event, fsm_id, created_at
`

func (q *Queries) CreateTaskWithID(ctx context.Context, fsmID int64, iD int64, event []byte) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTaskWithID, fsmID, iD, event)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Event,
		&i.FsmID,
		&i.CreatedAt,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, event, fsm_id, created_at FROM tasks
WHERE fsm_id = ?
ORDER BY id ASC
`

func (q *Queries) ListTasks(ctx context.Context, fsmID int64) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, fsmID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Event,
			&i.FsmID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
