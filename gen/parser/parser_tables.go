// generated by Textmapper; DO NOT EDIT

package parser

import (
	"fmt"

	"github.com/egoodhall/fsm/gen/parser/token"
)

var tmNonterminals = [...]string{
	"OptionName",
	"OptionString",
	"OptionBool",
	"OptionInt",
	"OptionFloat",
	"OptionValue",
	"Option",
	"TypeName",
	"TypeDeclaration",
	"FsmName",
	"InputType",
	"StateName",
	"ContextType",
	"StateContext",
	"StartState",
	"RegularState",
	"EndState",
	"StateDeclaration",
	"SourceState",
	"TargetState",
	"TargetStateRest",
	"TargetStateList",
	"TransitionDeclaration",
	"FsmBodyItem",
	"FsmBodyRest",
	"FsmBody",
	"FsmInputType",
	"FsmDefinition",
	"Definition",
	"Definitions",
	"FsmFile",
}

func symbolName(sym int32) string {
	if sym == noToken {
		return "<no-token>"
	}
	if sym < int32(token.NumTokens) {
		return token.Type(sym).String()
	}
	if i := int(sym) - int(token.NumTokens); i < len(tmNonterminals) {
		return tmNonterminals[i]
	}
	return fmt.Sprintf("nonterminal(%d)", sym)
}

var tmAction = []int32{
	-3, -1, -1, -1, -1, 42, 40, 41, -15, 47, 12, -1, 10, -1, 0, -1, 44, 43, 45,
	-1, -27, -1, 11, -1, 13, -1, -1, -1, -1, -1, 21, 22, 23, 31, 32, -39, 35, -1,
	-51, 1, 2, 3, 4, 5, 6, 7, 8, -1, 37, 14, -1, -1, -1, 24, -1, 33, 39, -1, 9,
	17, -1, 19, -1, 20, -1, 38, 15, -1, 18, 25, -63, -1, 16, -1, 28, 30, -69, 26,
	-1, -2,
}

var tmLalr = []int32{
	2, -1, 3, -1, 4, -1, 8, -1, 0, 48, -1, -2, 2, -1, 3, -1, 4, -1, 8, -1, 0, 46,
	-1, -2, 15, -1, 16, -1, 17, -1, 18, -1, 13, 36, -1, -2, 15, -1, 16, -1, 17,
	-1, 18, -1, 13, 34, -1, -2, 15, -1, 16, -1, 17, -1, 18, -1, 13, 36, -1, -2,
	20, -1, 14, 29, -1, -2, 20, -1, 14, 27, -1, -2,
}

var tmGoto = []int32{
	0, 2, 2, 6, 10, 14, 14, 14, 14, 18, 40, 44, 48, 52, 58, 74, 80, 86, 92, 98,
	100, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 130, 132,
	136, 138, 140, 146, 148, 150, 156, 162, 168, 174, 176, 180, 184, 186, 192,
	198, 204, 208, 210, 214, 218, 222, 224,
}

var tmFromTo = []int8{
	78, 79, 0, 1, 8, 1, 0, 2, 8, 2, 0, 3, 8, 3, 0, 4, 8, 4, 1, 10, 2, 12, 3, 14,
	19, 24, 26, 49, 27, 49, 28, 49, 29, 53, 60, 66, 64, 69, 73, 69, 11, 19, 51,
	60, 25, 48, 67, 72, 11, 20, 21, 38, 4, 16, 37, 56, 57, 65, 4, 17, 13, 22, 47,
	58, 50, 59, 51, 61, 52, 63, 62, 68, 71, 75, 20, 26, 35, 26, 38, 26, 20, 27,
	35, 27, 38, 27, 20, 28, 35, 28, 38, 28, 20, 29, 35, 29, 38, 29, 54, 64, 70,
	73, 76, 73, 15, 23, 23, 39, 23, 40, 23, 41, 23, 42, 3, 15, 23, 43, 23, 44,
	23, 45, 23, 46, 23, 47, 0, 5, 8, 5, 2, 13, 0, 6, 8, 6, 1, 11, 19, 25, 26, 50,
	27, 51, 28, 52, 60, 67, 51, 62, 20, 30, 35, 30, 38, 30, 20, 31, 35, 31, 38,
	31, 20, 32, 35, 32, 38, 32, 20, 33, 35, 33, 38, 33, 29, 54, 64, 70, 73, 76,
	70, 74, 76, 77, 64, 71, 20, 34, 35, 34, 38, 34, 20, 35, 35, 35, 38, 35, 20,
	36, 35, 55, 38, 36, 20, 37, 38, 57, 11, 21, 0, 7, 8, 7, 0, 8, 8, 8, 0, 9, 8,
	18, 0, 78,
}

var tmRuleLen = []int8{
	1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 3, 1, 1, 1, 1, 3, 3, 4, 3, 3, 1, 1, 1, 1, 1,
	3, 2, 2, 1, 5, 1, 1, 2, 1, 1, 0, 3, 6, 5, 1, 1, 1, 2, 2, 2, 1, 1, 0,
}

var tmRuleSymbol = []int32{
	26, 27, 28, 29, 30, 31, 31, 31, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	41, 42, 43, 43, 43, 44, 45, 46, 46, 47, 47, 48, 49, 49, 50, 50, 51, 51, 52,
	53, 53, 54, 54, 54, 54, 54, 55, 55, 56, 56,
}

var tmRuleType = [...]NodeType{
	OptionName,   // OptionName : Name
	OptionString, // OptionString : StringLiteral
	OptionBool,   // OptionBool : BoolLiteral
	OptionInt,    // OptionInt : IntLiteral
	OptionFloat,  // OptionFloat : FloatLiteral
	0,            // OptionValue : OptionString
	0,            // OptionValue : OptionBool
	0,            // OptionValue : OptionInt
	0,            // OptionValue : OptionFloat
	0,            // Option : 'option' OptionName '=' OptionValue ';'
	TypeName,     // TypeName : Name
	0,            // TypeDeclaration : 'type' TypeName ';'
	FsmName,      // FsmName : Name
	InputType,    // InputType : Name
	StateName,    // StateName : Name
	ContextType,  // ContextType : Name
	0,            // StateContext : '[' ContextType ']'
	0,            // StartState : 'start' StateName ';'
	0,            // RegularState : 'state' StateName StateContext ';'
	0,            // RegularState : 'state' StateName ';'
	0,            // EndState : 'end' StateName ';'
	0,            // StateDeclaration : StartState
	0,            // StateDeclaration : RegularState
	0,            // StateDeclaration : EndState
	SourceState,  // SourceState : Name
	TargetState,  // TargetState : Name
	0,            // TargetStateRest : 'or' TargetState TargetStateRest
	0,            // TargetStateRest : 'or' TargetState
	0,            // TargetStateList : TargetState TargetStateRest
	0,            // TargetStateList : TargetState
	0,            // TransitionDeclaration : 'transition' SourceState 'to' TargetStateList ';'
	0,            // FsmBodyItem : StateDeclaration
	0,            // FsmBodyItem : TransitionDeclaration
	0,            // FsmBodyRest : FsmBodyItem FsmBodyRest
	0,            // FsmBodyRest : FsmBodyItem
	0,            // FsmBody : FsmBodyRest
	0,            // FsmBody :
	0,            // FsmInputType : '[' InputType ']'
	0,            // FsmDefinition : 'fsm' FsmName FsmInputType '{' FsmBody '}'
	0,            // FsmDefinition : 'fsm' FsmName '{' FsmBody '}'
	0,            // Definition : TypeDeclaration
	0,            // Definition : FsmDefinition
	0,            // Definition : Option
	0,            // Definition : error ';'
	0,            // Definition : error '}'
	0,            // Definitions : Definition Definitions
	0,            // Definitions : Definition
	0,            // FsmFile : Definitions
	0,            // FsmFile :
}

// set(follow ERROR) = RBRACE, SEMICOLON
var afterErr = []token.Type{
	13, 14,
}
