// generated by Textmapper; DO NOT EDIT

package token

import (
	"fmt"
)

// Type is an enum of all terminal symbols of the fsm language.
type Type int32

// Token values.
const (
	UNAVAILABLE Type = iota - 1
	EOI
	INVALID_TOKEN
	FSM    // fsm
	TYPE   // type
	OPTION // option
	WHITESPACE
	EOLCOMMENT
	BLOCKCOMMENT
	ERROR
	NAME
	LBRACK     // [
	RBRACK     // ]
	LBRACE     // {
	RBRACE     // }
	SEMICOLON  // ;
	START      // start
	STATE      // state
	END        // end
	TRANSITION // transition
	TO         // to
	OR         // or
	ASSIGN     // =
	STRINGLITERAL
	BOOLLITERAL
	INTLITERAL
	FLOATLITERAL

	NumTokens
)

var tokenStr = [...]string{
	"EOI",
	"INVALID_TOKEN",
	"fsm",
	"type",
	"option",
	"WHITESPACE",
	"EOLCOMMENT",
	"BLOCKCOMMENT",
	"ERROR",
	"NAME",
	"[",
	"]",
	"{",
	"}",
	";",
	"start",
	"state",
	"end",
	"transition",
	"to",
	"or",
	"=",
	"STRINGLITERAL",
	"BOOLLITERAL",
	"INTLITERAL",
	"FLOATLITERAL",
}

func (tok Type) String() string {
	if tok >= 0 && int(tok) < len(tokenStr) {
		return tokenStr[tok]
	}
	return fmt.Sprintf("token(%d)", tok)
}
